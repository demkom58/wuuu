apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.netflix.dgs.codegen'
apply plugin: 'org.graalvm.buildtools.native'
apply plugin: 'com.google.cloud.tools.jib'

ext {
    set('springAiVersion', "0.8.1")
    set('springModulithVersion', "1.1.3")
    set('neo4jMigrationVersion', "2.9.3")
    set('jmoleculesStarterVersion', "0.19.0")
    set('jmoleculesCqrsVersion', "1.9.0")
    set('jmoleculesHexagonalVersion', "1.9.0")
    set('jmoleculesArchunitVersion', "1.6.0")
    set('archunitJunit5Version', "1.2.1")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'
    implementation "eu.michael-simons.neo4j:neo4j-migrations-spring-boot-starter:${neo4jMigrationVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'com.apollographql.federation:federation-graphql-java-support'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'org.springframework.modulith:spring-modulith-actuator'
    runtimeOnly 'org.springframework.modulith:spring-modulith-observability'

    implementation "org.jmolecules.integrations:jmolecules-starter-ddd:${jmoleculesStarterVersion}"
    implementation "org.jmolecules:jmolecules-cqrs-architecture:${jmoleculesCqrsVersion}"
    implementation "org.jmolecules:jmolecules-hexagonal-architecture:${jmoleculesHexagonalVersion}"
    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
    testImplementation "org.jmolecules.integrations:jmolecules-archunit:${jmoleculesArchunitVersion}"
    testImplementation "com.tngtech.archunit:archunit-junit5:${archunitJunit5Version}"

    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage'
    }

    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:neo4j'
}

generateJava {
    schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
    packageName = 'io.wuuu.backend.codegen'
    generateClient = true
}

tasks.named('test') {
    useJUnitPlatform()
}